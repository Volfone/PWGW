@page "/projectGasification"

@using Microsoft.Extensions.Logging
@namespace BlazorControlWork.Data

@inject IWebHostEnvironment Environment
@inject SingletonServise servise
@inject NavigationManager manager

@if (user.GetType().Name == "Customer")
{
    <h2>Документы застройщика</h2>
    <br>
    <table class="table">
        <thead>
            <tr>
                <th>Documents name</th>
                <th>file</th>
                <th></th>
                <th>State </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var i in DeveloperDict)
            {
                <tr>
                    <td>@DeveloperDict[i.Key]</td>
                    @if (docs.Find(x => x.Name == DeveloperDict[i.Key]) != null && docs.Find(x => x.Name == DeveloperDict[i.Key]).Name == DeveloperDict[i.Key])
                    {
                        <td> <lable> @docs.Find(x => x.Name == DeveloperDict[i.Key]).FileName</lable></td>
                        <td> <button type="button" class="btn btn-info" @onclick="() => ApplyDeveloper(DeveloperDict[i.Key])">Apply</button> </td>
                    }
                    else
                    {
                        <td> <label> Не загружено </label> </td>
                    }
                    @if (docs.Find(x => x.Name == DeveloperDict[i.Key]) != null && docs.Find(x => x.Name == DeveloperDict[i.Key]).ItsOK == true)
                    {
                        <td> <lable> Подтвержден</lable></td>
                    }
                </tr>
            }
        </tbody>
    </table>
    <br>

    <h2>Документы планировщика</h2>
    <br>

    <table class="table">
        <thead>
            <tr>
                <th>Documents name</th>
                <th>Info</th>
                <th>Check</th>
                <th>State</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <label>
                        Диаметр (мм) трубопровода и протяженность линейного объекта (м)
                    </label>
                </td>
                <td> <input type="text" readonly class="text-muted mb-0" @bind-value=text1 /></td>
                @if(text1 != null && text1 != string.Empty)
                {
                    <td> <button type="button" class="btn btn-info" @onclick="() => Apply(docss.Find(x => x.Name == PlannerDict[0]).Name)">Apply</button> </td>
                }
                @if (docss.Find(x => x.Name == PlannerDict[0]) != null && docss.Find(x => x.Name == PlannerDict[0]).ItsOK == true)
                {
                    <td> <lable> Подтвержден</lable></td>
                }
            </tr>
            <tr>
                <td>
                    <label>
                        Производительность БОС, м3/сут
                    </label>
                </td>
                <td> <input type="text" readonly class="text-muted mb-0" @bind-value=text2 /></td>
                @if(text2 != null && text2 != string.Empty)
                {
                    <td> <button type="button" class="btn btn-info" @onclick="() => Apply(docss.Find(x => x.Name == PlannerDict[1]).Name)">Apply</button> </td>
                }
                @if (docss.Find(x => x.Name == PlannerDict[1]) != null && docss.Find(x => x.Name == PlannerDict[1]).ItsOK == true)
                {
                    <td> <lable> Подтвержден</lable></td>
                }
            </tr>

            <tr>
                <td>
                    <label>
                        кол.-во (шт) и производительность КНС (м3
                        /ч)
                    </label>
                </td>
                <td> <input type="text" readonly class="text-muted mb-0" @bind-value=text3 /></td>
                @if (text3 != null && text3 != string.Empty)
                {
                    <td> <button type="button" class="btn btn-info" @onclick="() => Apply(docss.Find(x => x.Name == PlannerDict[2]).Name)">Apply</button> </td>
                }
                @if (docss.Find(x => x.Name == PlannerDict[2]) != null && docss.Find(x => x.Name == PlannerDict[2]).ItsOK == true)
                {
                    <td> <lable> Подтвержден</lable></td>
                }
            </tr>

        </tbody>
    </table>
    <br>
}

@if (user.GetType().Name == "Developer")
{
    <table class="table"> 
        <thead>
            <tr>
                <th>Documents name</th>
                <th>Select file</th>
                <th>Add to DB</th>@*
                <th>Load</th>*@
            </tr>
        </thead>
        <tbody>
            @foreach (var i in DeveloperDict)
            {
                <tr>
                    <td>@DeveloperDict[i.Key]</td>
                    @if (docs.Find(x => x.Name == DeveloperDict[i.Key]) != null && docs.Find(x => x.Name == DeveloperDict[i.Key]).Name == DeveloperDict[i.Key])
                    {
                        <td> <lable>@docs.Find(x => x.Name == DeveloperDict[i.Key]).FileName</lable></td>
                        <td> <button type="button" class="btn btn-danger" @onclick="() => DeleteFromDBDeveloper(DeveloperDict[i.Key])">Delete</button> </td>
                    }
                    else
                    {
                        <td> <InputFile OnChange="LoadFiles" /> </td>
                        <td> <button type="button" class="btn btn-success" @onclick="() => AddToDBDeveloper(DeveloperDict[i.Key])">Add</button> </td>
                    }
                    @if (docs.Find(x => x.Name == DeveloperDict[i.Key]) != null && docs.Find(x => x.Name == DeveloperDict[i.Key]).ItsOK == true)
                    {
                        <td> <lable> Подтвержден</lable></td>
                    }
                    @*@if (docs.Find(x => x.Name == DeveloperDict[i.Key]) != null && docs.Find(x => x.Name == DeveloperDict[i.Key]).Name == DeveloperDict[i.Key])
                    {
                        <td> <button type="button" class="btn btn-info">Load</button></td>
                    }*@
                </tr>
            }
        </tbody>
    </table>
}
@if (user.GetType().Name == "Planner")
    {
        <table class="table"> 
        <thead>
            <tr>
                <th>Documents name</th>
                <th>Info</th>
                <th>Add to DB</th>
            </tr>
        </thead>
        <tbody>
                <tr>
                    <td>
                        <label>
                        Диаметр (мм) трубопровода и протяженность линейного объекта (м)
                        </label>
                    </td>
                <td> <input type="text" class="text-muted mb-0" @bind-value=text1 /></td>
                <td>
                    <button type="button" class="btn btn-success" @onclick="() => AddToDB(0)">
                        Add
                    </button>
                </td>
                @if (docss.Find(x => x.Name == PlannerDict[0]) != null && docss.Find(x => x.Name == PlannerDict[0]).ItsOK == true)
                {
                    <td> <lable> Подтвержден</lable></td>
                }
            </tr>
             <tr>
                    <td>
                        <label>
                            Производительность БОС, м3/сут
                        </label>
                    </td>
                <td> <input type="text" class="text-muted mb-0" @bind-value=text2 /></td>
                <td>
                    <button type="button" class="btn btn-success" @onclick="() => AddToDB(1)">
                        Add
                    </button>
                </td>
                @if (docss.Find(x => x.Name == PlannerDict[1]) != null && docss.Find(x => x.Name == PlannerDict[1]).ItsOK == true)
                {
                    <td> <lable> Подтвержден</lable></td>
                }
            </tr>
                <tr>
                    <td>
                        <label>
                            кол.-во (шт) и производительность КНС (м3
                            /ч)
                        </label>
                    </td>
                <td> <input type="text" class="text-muted mb-0" @bind-value=text3 /></td>
                <td>
                    <button type="button" class="btn btn-success" @onclick="() => AddToDB(2)">
                        Add
                    </button>
                </td>
                @if (docss.Find(x => x.Name == PlannerDict[2]) != null && docss.Find(x => x.Name == PlannerDict[2]).ItsOK == true)
                {
                    <td> <lable> Подтвержден</lable></td>
                }
            </tr>

            </tbody>
        </table>
}
else
{
    
}


@code {
    private IBrowserFile loadedFile;
    private IBrowserFile File;
    User user;
    string tr;
    List<DeveloperDocument> docs;
    List<PlannerDocument> docss;
    string text1 = string.Empty;
    string text2 = string.Empty;
    string text3 = string.Empty;
    bool checkBox;
    bool inputBlok1 = true;
    bool inputBlok2 = true;
    bool inputBlok3 = true;


    protected override void OnInitialized()
    {
        switch (servise.GetUser().GetType().Name)
        {
            case "Customer":
                user = servise.GetUser() as Customer;
                docs = servise.GetProject().Documents;
                docss = servise.GetProject().Documentss;
                if (docss.Find(x => x.Name == PlannerDict[0]) != null && docss.Find(x => x.Name == PlannerDict[0]).Name == PlannerDict[0])
                {
                    text1 = docss.Find(x => x.Name == PlannerDict[0]).Text;
                }
                if (docss.Find(x => x.Name == PlannerDict[1]) != null && docss.Find(x => x.Name == PlannerDict[1]).Name == PlannerDict[1])
                {
                    text2 = docss.Find(x => x.Name == PlannerDict[1]).Text;
                }
                if (docss.Find(x => x.Name == PlannerDict[2]) != null && docss.Find(x => x.Name == PlannerDict[2]).Name == PlannerDict[2])
                {
                    text3 = docss.Find(x => x.Name == PlannerDict[2]).Text;
                }
                break;
            case "Developer":
                user = servise.GetUser() as Developer;
                docs = servise.GetProject().Documents;
                break;
            case "Planner":
                user = servise.GetUser() as Planner;
                docss = servise.GetProject().Documentss;

                if (docss.Find(x => x.Name == PlannerDict[0]) != null && docss.Find(x => x.Name == PlannerDict[0]).Name == PlannerDict[0])
                {
                    text1 = docss.Find(x => x.Name == PlannerDict[0]).Text;
                }
                if (docss.Find(x => x.Name == PlannerDict[1]) != null && docss.Find(x => x.Name == PlannerDict[1]).Name == PlannerDict[1])
                {
                    text2 = docss.Find(x => x.Name == PlannerDict[1]).Text;
                }
                if (docss.Find(x => x.Name == PlannerDict[2]) != null && docss.Find(x => x.Name == PlannerDict[2]).Name == PlannerDict[2])
                {
                    text3 = docss.Find(x => x.Name == PlannerDict[2]).Text;
                }

                break;
        }

    }


    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        loadedFile = e.File;
        var path = Path.Combine(Environment.ContentRootPath,
                "wwwroot", "files",
            loadedFile.Name);
        await using FileStream fs = new(path, FileMode.Create);
        await loadedFile.OpenReadStream(10000000000000).CopyToAsync(fs);
    }

    private void AddToDB(int i)
    {
        var newDocs = new PlannerDocument(PlannerDict[i], false);
        if (docss.Find(x => x.Name == PlannerDict[i]) != null)
        {
            servise.GetProject().Documentss.Remove(docss.Find(x => x.Name == PlannerDict[i]));
        }
        switch(i)
        {
            case 0:
                if (text1 != null && text1 != string.Empty)
                {
                    newDocs.Text = text1;
                    newDocs.Name = PlannerDict[i];
                }
                else
                    return;
                break;
            case 1:
                if (text2 != null && text2 != string.Empty)
                {
                    newDocs.Text = text2;
                    newDocs.Name = PlannerDict[i];
                }
                else
                    return;
                break;
            case 2:
                if (text3 != null && text3 != string.Empty)
                {
                    newDocs.Text = text3;
                    newDocs.Name = PlannerDict[i];
                }
                else
                    return;
                break;
        }

        servise.GetProject().Documentss.Add(newDocs);


        Mongo.ReplaceProject(servise.GetProject().Name, servise.GetProject());
    }

    private void AddToDBDeveloper(string fileName)
    {
        if (loadedFile != null)
        {
            if (docs.Find(x => x.Name == fileName) != null)
            {
                servise.GetProject().Documents.Remove(docs.Find(x => x.Name == fileName));
            }
            FileSystemService fs = new FileSystemService();
            string path = Path.Combine(Environment.ContentRootPath,
                            "wwwroot", "files",
                            loadedFile.Name);
            fs.UploadToDb(loadedFile, path);
            var newDoc = new DeveloperDocument(fileName, false)
            {
                FileName = loadedFile.Name
            };
            servise.GetProject().Documents.Add(newDoc);
            Mongo.ReplaceProject(servise.GetProject().Name, servise.GetProject());
        }
        else
        {
            return;
        }
    }
    private void DeleteFromDBDeveloper(string fileName)
    {
        if (docs.Find(x => x.Name == fileName) != null)
        {
            servise.GetProject().Documents.Remove(docs.Find(x => x.Name == fileName));
        }
        FileSystemService fs = new FileSystemService();
        Mongo.ReplaceProject(servise.GetProject().Name, servise.GetProject());
    }

    private void Load(string name)
    {
        FileSystemService fs = new FileSystemService();
        fs.DownloadToLocal(docs.Find(x => x.Name == name).FileName);
    }

    private void ApplyDeveloper(string name)
    {
        var newDoc = new DeveloperDocument(name, true)
        {
                FileName = docs.Find(x => x.Name == name).FileName
            };
        if (docs.Find(x => x.Name == name) != null)
        {
            servise.GetProject().Documents.Remove(docs.Find(x => x.Name == name));
        }
        servise.GetProject().Documents.Add(newDoc);
        Mongo.ReplaceProject(servise.GetProject().Name, servise.GetProject());
    }

    private void Apply(string name)
    {
        var newDoc = new PlannerDocument(name, true)
        {
            Text = (docss.Find(x => x.Name == name).Text)
        };
        if (docss.Find(x => x.Name == name) != null)
        {
            servise.GetProject().Documentss.Remove(docss.Find(x => x.Name == name));
        }
        servise.GetProject().Documentss.Add(newDoc);
        Mongo.ReplaceProject(servise.GetProject().Name, servise.GetProject());
    }

    Dictionary<int, string> DeveloperDict = new Dictionary<int, string>()
    { {0, "Письмо-обращение на имя Президента, Премьер-Министра, Минстрой РТ" },
      {1, "Задание на проектирование" },
      {2, "Ситуационный план (утвержденный исполкомом)" },
      {3, "Технические условия на присоединение кгазораспределительной сети (№, дата,срок действий Технических условий)" },
      {4, "Технический паспорт (план БТИ) объекта СКБ" },
      {5, "Технический паспорт (план БТИ) существующей котельной" },
      {6, "АКТ обследования объекта" },
      {7, "Технические условия на сети электроснабжение, водоснабжения, водоотведения при установке БМК" },
      {8, "Согласование посадки котельной" },
    };

    Dictionary<int, string> PlannerDict = new Dictionary<int, string>()
    {
      {0, "Диаметр (мм) трубопровода и протяженность линейного объекта (м)" },
      {1, "Сметная стоимость работ, тыс. руб." },
      {2, "Срок разработки проектной документации,месяцев" },
    };
}


