@page "/editing"

<PageTitle>Editing</PageTitle>

@using BlazorControlWork.Data
@inject NavigationManager Navigation

    <div class="row">
        <div class="col-lg-8">
            <div class="card mb-4">
                <div class="card-body">
    @if (user.GetType().Name == "Customer")
    {
        <div class="row">
            <div class="col-sm-3">
                <p class="mb-0">Full name</p>
            </div>
            <div class="col-sm-9">
                <input type="text" class="text-muted mb-0" @bind-value=Name/> 
            </div>
        </div>
        <hr>
    }
    @if (user.GetType().Name == "Developer")
    {
        <div class="row">
            <div class="col-sm-3">
                <p class="mb-0">Name</p>
            </div>
            <div class="col-sm-9">
                <input type="text" class="text-muted mb-0" @bind-value=Name/>
            </div>
        </div>
        <hr>
        <div class="row">
            <div class="col-sm-3">
                <p class="mb-0">OGRN</p>
            </div>
            <div class="col-sm-9">
                            <input type="text" maxlength="13" class="text-muted mb-0" @bind-value=MSRNDeveloper onkeyup="this.value = this.value.replace(/[^0-9]/ig, '')" />
            </div>
        </div>
        <hr>
        <div class="row">
            <div class="col-sm-3">
                <p class="mb-0">TIN</p>
            </div>
            <div class="col-sm-9">
                <input type="text" maxlength="10" class="text-muted mb-0" @bind-value=TINDeveloper onkeyup="this.value = this.value.replace(/[^0-9]/ig, '')"/>
            </div>
        </div>
        <hr>
        <div class="row">
            <div class="col-sm-3">
                <p class="mb-0">KPP</p>
            </div>
            <div class="col-sm-9">
                <input type="text" maxlength="9" class="text-muted mb-0" @bind-value=CORDeveloper onkeyup="this.value = this.value.replace(/[^0-9]/ig, '')" />
            </div>
        </div>
        <hr>
        <div class="row">
            <div class="col-sm-3">
                <p class="mb-0">Address</p>
            </div>
            <div class="col-sm-9">
                <input type="text" class="text-muted mb-0" @bind-value=Address />
            </div>
        </div>
        <hr>
        <div class="row">
            <div class="col-sm-3">
                <p class="mb-0">HeadName</p>
            </div>
            <div class="col-sm-9">
                <input type="text" class="text-muted mb-0" @bind-value=Head />
            </div>
        </div>
        <hr>
    }
    @if (user.GetType().Name == "Designer")
    {
        <div class="row">
            <div class="col-sm-3">
                <p class="mb-0">Name organization</p>
            </div>
            <div class="col-sm-9">
                <input type="text" class="text-muted mb-0" @bind-value=Administrant />
            </div>
        </div>
        <hr>
        <div class="row">
            <div class="col-sm-3">
                <p class="mb-0">OGRN</p>
            </div>
            <div class="col-sm-9">
                <input type="text" maxlength="13" class="text-muted mb-0" @bind-value=MSRNDesigner onkeyup="this.value = this.value.replace(/[^0-9]/ig, '')" />
            </div>
        </div>
        <hr>
        <div class="row">
            <div class="col-sm-3">
                <p class="mb-0">TIN</p>
            </div>
            <div class="col-sm-9">
                <input type="text" maxlength="10" class="text-muted mb-0" @bind-value=TINDesigner onkeyup="this.value = this.value.replace(/[^0-9]/ig, '')" />
            </div>
        </div>
        <hr>
        <div class="row">
            <div class="col-sm-3">
                <p class="mb-0">KPP</p>
            </div>
            <div class="col-sm-9">
                <input type="text" maxlength="9" class="text-muted mb-0" @bind-value=CORDesigner onkeyup="this.value = this.value.replace(/[^0-9]/ig, '')" />
            </div>
        </div>
        <hr>
        <div class="row">
            <div class="col-sm-3">
                <p class="mb-0">Name direcor</p>
            </div>
            <div class="col-sm-9">
                <input type="text" class="text-muted mb-0" @bind-value=Director />
            </div>
        </div>
        <hr>
        <div class="row">
            <div class="col-sm-3">
                <p class="mb-0">Name chief engineer</p>
            </div>
            <div class="col-sm-9">
                <input type="text" class="text-muted mb-0" @bind-value=MainEngineer />
            </div>
        </div>
        <hr>
    }
        <div class="row">
            <div class="col-sm-3">
                <p class="mb-0">Email</p>
            </div>
            <div class="col-sm-9">
                <input type="text" class="text-muted mb-0" @bind-value=Email />
            </div>
        </div>
        <hr>
        <div class="row">
            <div class="col-sm-3">
                <p class="mb-0">Phone number</p>
            </div>
            <div class="col-sm-9">
                <input type="text" maxlength="11" class="text-muted mb-0" @bind-value=Telephone onkeyup="this.value = this.value.replace(/[^0-9]/ig, '')" />
            </div>
        </div>
        </div>
        </div>
        @if (Error)
            {
                <br><div class="alert alert-danger" role="alert">
                    @ErrorText
                </div>
            }
        <button type="button" width="400" id="LogOut"
                class="btn btn-success" @onclick=SaveEdit>
            Edit
        </button> 
    </div>
</div>

@code {
    User user;
    string Telephone = string.Empty;
    string Email = string.Empty;
    string Name = string.Empty;
    string Department = string.Empty;
    string MSRNDeveloper = string.Empty;
    string TINDeveloper = string.Empty;
    string CORDeveloper = string.Empty;
    string MSRNDesigner = string.Empty;
    string TINDesigner = string.Empty;
    string CORDesigner = string.Empty;
    string Address = string.Empty;
    string Head = string.Empty;
    string Administrant = string.Empty;
    string Director = string.Empty;
    string MainEngineer = string.Empty;
    bool Error = false;
    string ErrorText = string.Empty;

    protected override void OnInitialized()
    {
        user = ActiveUser.user;
        Email = user.Email;
        Telephone = user.Telephone;
        switch (user.GetType().Name)
        {
            case "Customer":
                Name = (user as Customer).Name;
                Department = (user as Customer).Department;
                break;

            case "Developer":
                //Name = (user as Developer).Name;
                MSRNDeveloper = (user as Developer).MSRN;
                TINDeveloper = (user as Developer).TIN;
                CORDeveloper = (user as Developer).COR;
                Address = (user as Developer).Address;
                Head = (user as Developer).Head;
                break;

            case "Designer":
                MSRNDesigner = (user as Designer).MSRN;
                TINDesigner = (user as Designer).TIN;
                CORDesigner = (user as Designer).COR;
                Administrant = (user as Designer).Administrant;
                Director = (user as Designer).Director;
                MainEngineer = (user as Designer).MainEngineer;
                break;
        }
    }

    private void SaveEdit()
    {
        User newUser = null;
        Check();
        switch (user.GetType().Name)
        {
            case "Customer":
                if (Name == string.Empty || Email == string.Empty)
                {
                    Error = true;
                    ErrorText = "Заполните все поля!";
                }
                if(Error == false)
                {
                    newUser = new Customer(Telephone, Email, user.Password, user.Login, (user as Customer).Department)
                    {
                        Name = this.Name,
                        Department = this.Department,
                    };
                }
                else
                {
                    return;
                }

                break;
            case "Developer":
                if (Email == string.Empty || MSRNDeveloper == string.Empty || TINDeveloper == string.Empty || 
                    CORDeveloper == string.Empty || Address == string.Empty || Head == string.Empty)
                {
                    Error = true;
                    ErrorText = "Заполните все поля!";
                }
                if(Error == false)
                {
                    newUser = new Developer(Telephone, Email, user.Password, user.Login)
                    {
                        //Name = this.Name,
                        MSRN = this.MSRNDeveloper,
                        TIN = this.TINDeveloper,
                        COR = this.CORDeveloper,
                        Address = this.Address,
                        Head = this.Head,
                    };
                }
                else
                {
                    return;
                }

                break;

            case "Designer":
                if (Email == string.Empty || Administrant == string.Empty || MSRNDesigner == string.Empty ||
                    TINDesigner == string.Empty || CORDesigner == string.Empty || Director == string.Empty || MainEngineer == string.Empty)
                {
                    Error = true;
                    ErrorText = "Заполните все поля!";
                }
                if(Error == false)
                {
                    newUser = new Designer(Telephone, Email, user.Password, user.Login)
                    {
                        Administrant = this.Administrant,
                        MSRN = MSRNDesigner,
                        TIN = TINDesigner,
                        COR = CORDesigner,
                        Director = this.Director,
                        MainEngineer = this.MainEngineer,
                    };
                }
                else
                {
                    return;
                }
                break;
        }
        MongoExamples.Replace(user.Login, newUser);
        ActiveUser.user = newUser;
        Navigation.NavigateTo("profile");
    }

    private void Check()
    {
        if (Telephone != string.Empty && Telephone.Length != 11)
        {
            Error = true;
            ErrorText = "Неверный формат ввода!";
            return;
        }
        else
        {
            Error = false;
        }
        switch (user.GetType().Name)
        {
            case "Developer":
                if ((MSRNDeveloper != null && MSRNDeveloper != string.Empty && MSRNDeveloper.Length != 13) ||
                    (TINDeveloper != null && TINDeveloper != string.Empty && TINDeveloper.Length != 10) || (CORDeveloper != null && CORDeveloper != string.Empty && CORDeveloper.Length != 9))
                {
                    Error = true;
                    ErrorText = "Неверный формат ввода!";
                    return;
                }
                break;

            case "Designer":
                if ((MSRNDesigner != null && MSRNDesigner != string.Empty && MSRNDesigner.Length != 13) ||
                    (TINDesigner != null && TINDesigner != string.Empty && TINDesigner.Length != 10) || (CORDesigner != null && CORDesigner != string.Empty && CORDesigner.Length != 9))
                {
                    Error = true;
                    ErrorText = "Неверный формат ввода!";
                    return;
                }
                break;
        }
    }



    //private async Task LoadFiles(InputFileChangeEventArgs e)
    //{
    //    var format = "image/*";
    //    IBrowserFile file = e.File;
    //    var path = Path.Combine(Environment.ContentRootPath,
    //                "wwwroot", "unsafe",
    //                file.Name);
    //    var resizedImageFile = await file.RequestImageFileAsync(format, 250, 250);
    //    var buffer = new byte[resizedImageFile.Size];
    //    Stream stream = resizedImageFile.OpenReadStream();
    //    await stream.ReadAsync(buffer);
    //    var imageDataUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
    //    imageUrl = imageDataUrl;
    //    //AddToDB(file);
    //}

    private void AddToDB(IBrowserFile file)
    {
        //FileSystemService fs = new FileSystemService();
        //string path = Path.Combine(Environment.ContentRootPath,
        //                "wwwroot", "unsafe",
        //                file.Name);
        //user.Photo = path;
        //Mongo.UpgradeOne(user.Login, "Photo", path);
        //fs.UploadImageToUserDb(file, path);
    }
}